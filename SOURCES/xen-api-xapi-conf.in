# The xapi config file has 3 sections: a global policy section;
# a section for paths to helper utilities; and a timeout tweak section.

# Global policy: #################################################

# The full list of xenopsd instances to manage. These must all be running.
xenopsd-queues = org.xen.xcp.xenops.classic

# The default xenopsd to use for VMs, unless a per-VM override is specified
xenopsd-default = org.xen.xcp.xenops.classic

# Configure the logging policy:
# logconfig = @ETCDIR@/log.conf

# The pool configuration file contains either 'master' or
# 'slave:<MASTER IP>':
# pool_config_file = @ETCDIR@/pool.conf
pool_config_file = /etc/xcp/pool.conf

# The pool secret (or pool token) is shared on pool join and used
# to authenticate the slave to the master.
# pool_secret_path = @ETCDIR@/ptoken

# Enable/disable the watchdog
# nowatchdog = false

# Allow storage migration when SRs have been mirrored out-of-band
# and the SR uuids match
# relax-xsm-sr-check = true

# Disable logging for the following modules
disable-logging-for = http db_write redo_log api_readonly

# Paths to utilities: ############################################

# Used to start/restart/stop the stunnel listening for management
# traffic over HTTPS
# xapissl = @LIBEXECDIR@/xapissl

# Path to the udhcpd program, used to hand out IP addresses on the
# host internal management network.
# udhcpd = @LIBEXECDIR@/udhcpd
udhcpd = /bin/true

# Tweak timeouts: ################################################

# If the slave's connection to the master blocks for longer than
# this then we forcibly reset it:
# master_connection_reset_timeout = 120

# amount of time to retry master_connection before restarting xapi;
# -ve means don't timeout
# master_connection_retry_timeout = -1 # disabled

# time to wait for qemu-dm to signal "ready" in xenstore
# qemu_dm_ready_timeout = 300

# time to wait for the hotplug scripts to complete
# hotplug_timeout = 300

# time to wait during a PIF.reconfigure_ip for the connection to
# the master to re-establish before concluding that it's broken and failing
# pif_reconfigure_ip_timeout = 300

# time between invocations of the pool database sync; every interval
# the pool database will be backed up to one host
# pool_db_sync_interval = 300

# time between attempts to synchronise the RRD archives to other
# hosts
# pool_data_sync_interval = 86400 # a day in seconds

# time to wait for in-guest PV drivers to acknowledge a shutdown request
# before we conclude that the drivers have failed
# domain_shutdown_ack_timeout = 10

# time to wait for a domain to shutdown before we conclude the operation
# has failed. Note it can take a long time to shutdown if (for example)
# the OS has decided to install a large set of patches.
# domain_shutdown_total_timeout = 1200

# time between invocations of the "xapi healthcheck" script by xhad
# ha_xapi_healthcheck_interval = 60

# time after which we assume the "xapi healthcheck" has failed and xapi
# should be restarted
# ha_xapi_healthcheck_timeout = 120

# total number of times to attempt to restart a xapi which has failed
# a healthcheck
# ha_xapi_restart_attempts = 1

# time after which we assume a xapi restart attempt has failed
# ha_xapi_restart_timeout = 300

# time between writing RRD data to disk (the data is primarily stored in
# RAM)
# rrd_backup_interval = 86400 # 1 day in seconds

# time between checks against an external authentication service (such as AD).
# If a user account associated with a session has been removed from a
# necessary group or otherwise disabled, the session will be destroyed.
# session_revalidation_interval = 300

# time between attempts to resychronise the subjects list with an external
# authentication service (such as AD)
# update_all_subjects_interval = 900

# time to wait for a domain to hit its balloon target before concluding that
# the balloon driver has failed
# wait_memory_target_timeout = 256

# time to wait for a response from the VSS agent before concluding the agent
# has failed
# snapshot_with_quiesce_timeout = 600

# time between master - slave heartbeats
# host_heartbeat_interval = 30

# time after the last heartbeat we wait before assuming the host is dead.
# Note we cannot safely restart VMs on other hosts because it might be
# simply a network partition. Turn HA on if you want VM restart.
# host_assumed_dead_interval = 600

# time after asking xapi to restart before it actually exits(). This delay
# allows the current API call to succeed.
# fuse_time = 10

# time after receiving a pool database restore before automatically restarting
# xapi to read it.
# db_restore_fuse_time = 30

# time after receiving the last API call before automatically logging out
# a session
# inactive_session_timeout = 86400 # 1 day in seconds

# time after receiving the last task progress update before we assume the
# task has leaked and destroying it
# pending_task_timeout = 86400 # 1 day in seconds

# time after a task has been completed before we assume the client has failed,
# leaked the task, requiring xapi to destroy it
# completed_task_timeout = 3900 # 64 minutes in seconds

# minimum time between a VM starting and the next reboot (used to avoid
# a VM crashing in a reboot loop)
# minimum_time_between_bounces = 120

# If a domain is rebooted (from inside) in less than this time since it last
# started, then insert an artificial delay
# minimum_time_between_reboot_with_no_added_delay = 60

# ha_monitor_interval = 20

# Unconditionally replan every once in a while just in case the overcommit
# protection is buggy and we don't notice 
# ha_monitor_plan_interval = 1800

# ha_monitor_startup_timeout = 1800

# ha_default_timeout_base = 60

# guest_liveness_timeout = 300

# permanent_master_failure_retry_interval = 60

# The maximum time, in seconds, for which we are prepared to wait for
# a response from the block device I/O process before assuming that it
# has died while emptying
# redo_log_max_block_time_empty = 2

# The maximum time, in seconds, for which we are prepared to wait for
# a response from the block device I/O process before assuming that it
# has died while reading
# redo_log_max_block_time_read = 30

# The maximum time, in seconds, for which we are prepared to wait for
# a response from the block device I/O process before assuming that
# it has died while writing a delta
# redo_log_max_block_time_writedelta = 2

# The maximum time, in seconds, for which we are prepared to wait for
# a response from the block device I/O process before assuming that
# it has died while writing a database
# redo_log_max_block_time_writedb = 30

# The maximum time, in seconds, for which we are prepared to wait for
# a response from the block device I/O process before assuming that
# it has died while initially connecting to it
# redo_log_max_startup_time = 5

# The delay between each attempt to connect to the block device I/O
# process
# redo_log_connect_delay = 0.1
